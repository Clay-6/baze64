use std::collections::HashMap;

pub trait Alphabet {
    const ENCODE_MAP: [char; 64];
    const DECODE_MAP: [u8; 128];
    const PADDING: char;

    fn encode_bits(bits: u8) -> char {
        Self::ENCODE_MAP[bits as usize]
    }
    fn decode_char(c: char) -> u8;
}

#[derive(Debug, Clone, Copy)]
pub struct Standard;

#[derive(Debug, Clone, Copy)]
pub struct UrlSafe;

impl Alphabet for UrlSafe {
    const ENCODE_MAP: [char; 64] = [
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
        'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1',
        '2', '3', '4', '5', '6', '7', '8', '9', '-', '_',
    ];
    const DECODE_MAP: [u8; 128] = [
        0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
        0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
        0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x3E, 0x64,
        0x64, 0x64, 0x3F, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x64, 0x64,
        0x64, 0x64, 0x64, 0x64, 0x64, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
        0x19, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21,
        0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
        0x31, 0x32, 0x33, 0x64, 0x64, 0x64, 0x64, 0x64,
    ];

    const PADDING: char = '=';

    fn decode_char(c: char) -> u8 {
        let decode_map: HashMap<char, usize> = HashMap::from([
            ('A', 0),
            ('B', 1),
            ('C', 2),
            ('D', 3),
            ('E', 4),
            ('F', 5),
            ('G', 6),
            ('H', 7),
            ('I', 8),
            ('J', 9),
            ('K', 10),
            ('L', 11),
            ('M', 12),
            ('N', 13),
            ('O', 14),
            ('P', 15),
            ('Q', 16),
            ('R', 17),
            ('S', 18),
            ('T', 19),
            ('U', 20),
            ('V', 21),
            ('W', 22),
            ('X', 23),
            ('Y', 24),
            ('Z', 25),
            ('a', 26),
            ('b', 27),
            ('c', 28),
            ('d', 29),
            ('e', 30),
            ('f', 31),
            ('g', 32),
            ('h', 33),
            ('i', 34),
            ('j', 35),
            ('k', 36),
            ('l', 37),
            ('m', 38),
            ('n', 39),
            ('o', 40),
            ('p', 41),
            ('q', 42),
            ('r', 43),
            ('s', 44),
            ('t', 45),
            ('u', 46),
            ('v', 47),
            ('w', 48),
            ('x', 49),
            ('y', 50),
            ('z', 51),
            ('0', 52),
            ('1', 53),
            ('2', 54),
            ('3', 55),
            ('4', 56),
            ('5', 57),
            ('6', 58),
            ('7', 59),
            ('8', 60),
            ('9', 61),
            ('-', 62),
            ('_', 63),
        ]);
        *decode_map.get(&c).unwrap() as u8
    }
}

impl Alphabet for Standard {
    const ENCODE_MAP: [char; 64] = [
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
        'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1',
        '2', '3', '4', '5', '6', '7', '8', '9', '+', '/',
    ];
    const DECODE_MAP: [u8; 128] = [
        0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
        0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64,
        0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x3E, 0x64,
        0x64, 0x64, 0x3F, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x64, 0x64,
        0x64, 0x64, 0x64, 0x64, 0x64, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
        0x19, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21,
        0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
        0x31, 0x32, 0x33, 0x64, 0x64, 0x64, 0x64, 0x64,
    ];
    const PADDING: char = '=';

    fn decode_char(c: char) -> u8 {
        let decode_map: HashMap<char, usize> = HashMap::from([
            ('A', 0),
            ('B', 1),
            ('C', 2),
            ('D', 3),
            ('E', 4),
            ('F', 5),
            ('G', 6),
            ('H', 7),
            ('I', 8),
            ('J', 9),
            ('K', 10),
            ('L', 11),
            ('M', 12),
            ('N', 13),
            ('O', 14),
            ('P', 15),
            ('Q', 16),
            ('R', 17),
            ('S', 18),
            ('T', 19),
            ('U', 20),
            ('V', 21),
            ('W', 22),
            ('X', 23),
            ('Y', 24),
            ('Z', 25),
            ('a', 26),
            ('b', 27),
            ('c', 28),
            ('d', 29),
            ('e', 30),
            ('f', 31),
            ('g', 32),
            ('h', 33),
            ('i', 34),
            ('j', 35),
            ('k', 36),
            ('l', 37),
            ('m', 38),
            ('n', 39),
            ('o', 40),
            ('p', 41),
            ('q', 42),
            ('r', 43),
            ('s', 44),
            ('t', 45),
            ('u', 46),
            ('v', 47),
            ('w', 48),
            ('x', 49),
            ('y', 50),
            ('z', 51),
            ('0', 52),
            ('1', 53),
            ('2', 54),
            ('3', 55),
            ('4', 56),
            ('5', 57),
            ('6', 58),
            ('7', 59),
            ('8', 60),
            ('9', 61),
            ('+', 62),
            ('/', 63),
        ]);
        *decode_map.get(&c).unwrap() as u8
    }
}
